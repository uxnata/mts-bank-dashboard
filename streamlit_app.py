import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from supabase import create_client
import numpy as np

# ============= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =============
st.set_page_config(
    page_title="–ú–¢–° –ë–∞–Ω–∫ | –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ============= –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê =============
COLORS = {
    'primary': '#1e40af',      # –°–∏–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π –±—Ä–µ–Ω–¥)
    'secondary': '#64748b',     # –°–µ—Ä—ã–π (–≤—Ç–æ—Ä–∏—á–Ω—ã–π)
    'success': '#059669',       # –ó–µ–ª–µ–Ω—ã–π (–ø–æ–∑–∏—Ç–∏–≤)
    'warning': '#d97706',       # –û—Ä–∞–Ω–∂–µ–≤—ã–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    'danger': '#dc2626',        # –ö—Ä–∞—Å–Ω—ã–π (–Ω–µ–≥–∞—Ç–∏–≤)
    'info': '#0891b2',          # –ì–æ–ª—É–±–æ–π (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
    'background': '#f8fafc',    # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    'surface': '#ffffff',       # –ë–µ–ª—ã–π
    'text_primary': '#0f172a',  # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
    'text_secondary': '#475569', # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    'border': '#e2e8f0',        # –°–≤–µ—Ç–ª–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
    'chart_colors': ['#1e40af', '#0891b2', '#059669', '#d97706', '#dc2626']  # –ü–∞–ª–∏—Ç—Ä–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
}

# ============= –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ï –°–¢–ò–õ–ò =============
st.markdown(f"""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    * {{
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }}
    
    /* –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
    #MainMenu {{visibility: hidden;}}
    footer {{visibility: hidden;}}
    header {{visibility: hidden;}}
    
    /* –§–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {{
        background-color: {COLORS['background']};
    }}
    
    /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .main > div {{
        padding: 1.5rem;
        max-width: 1400px;
        margin: 0 auto;
    }}
    
    /* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */
    .main-header {{
        background: {COLORS['surface']};
        border-left: 4px solid {COLORS['primary']};
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }}
    
    .main-title {{
        color: {COLORS['text_primary']};
        font-size: 1.875rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }}
    
    .main-subtitle {{
        color: {COLORS['text_secondary']};
        font-size: 1rem;
        font-weight: 400;
    }}
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="metric-container"] {{
        background: {COLORS['surface']};
        border: 1px solid {COLORS['border']};
        padding: 1.25rem;
        border-radius: 8px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        transition: all 0.2s ease;
    }}
    
    [data-testid="metric-container"]:hover {{
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transform: translateY(-1px);
    }}
    
    [data-testid="metric-container"] label {{
        color: {COLORS['text_secondary']};
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }}
    
    [data-testid="metric-container"] [data-testid="metric-value"] {{
        color: {COLORS['text_primary']};
        font-size: 1.875rem;
        font-weight: 700;
        line-height: 1.2;
    }}
    
    [data-testid="metric-container"] [data-testid="metric-delta"] {{
        font-size: 0.875rem;
        font-weight: 500;
    }}
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–µ–∫—Ü–∏–π */
    .section-card {{
        background: {COLORS['surface']};
        border: 1px solid {COLORS['border']};
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
    }}
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π */
    h2 {{
        color: {COLORS['text_primary']};
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid {COLORS['border']};
    }}
    
    h3 {{
        color: {COLORS['text_primary']};
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }}
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {{
        background-color: {COLORS['primary']};
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: 500;
        border-radius: 6px;
        transition: all 0.2s ease;
        font-size: 0.875rem;
    }}
    
    .stButton > button:hover {{
        background-color: #1e3a8a;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }}
    
    /* –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div,
    .stMultiSelect > div > div,
    .stDateInput > div > div {{
        background: {COLORS['surface']};
        border: 1px solid {COLORS['border']};
        border-radius: 6px;
        font-size: 0.875rem;
    }}
    
    .stSelectbox > div > div:hover,
    .stMultiSelect > div > div:hover {{
        border-color: {COLORS['primary']};
    }}
    
    /* Radio buttons */
    .stRadio > div {{
        background: {COLORS['surface']};
        padding: 0.75rem;
        border-radius: 6px;
        border: 1px solid {COLORS['border']};
    }}
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .dataframe {{
        font-size: 0.875rem;
        border: 1px solid {COLORS['border']};
    }}
    
    .dataframe thead tr th {{
        background-color: {COLORS['background']};
        color: {COLORS['text_primary']};
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.75rem;
        letter-spacing: 0.05em;
        padding: 0.75rem;
    }}
    
    .dataframe tbody tr {{
        border-bottom: 1px solid {COLORS['border']};
    }}
    
    .dataframe tbody tr:hover {{
        background-color: {COLORS['background']};
    }}
    
    /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ */
    .stAlert {{
        border-radius: 6px;
        border: 1px solid;
        font-size: 0.875rem;
    }}
    
    /* Sidebar */
    .css-1d391kg {{
        background-color: {COLORS['surface']};
        border-right: 1px solid {COLORS['border']};
    }}
    
    /* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ */
    hr {{
        border: none;
        border-top: 1px solid {COLORS['border']};
        margin: 1.5rem 0;
    }}
    
    /* –ß–µ–∫–±–æ–∫—Å—ã */
    .stCheckbox {{
        font-size: 0.875rem;
    }}
    
    /* –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
    .status-badge {{
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 4px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.025em;
    }}
    
    .status-positive {{
        background-color: {COLORS['success']};
        color: white;
    }}
    
    .status-negative {{
        background-color: {COLORS['danger']};
        color: white;
    }}
    
    .status-neutral {{
        background-color: {COLORS['secondary']};
        color: white;
    }}
</style>
""", unsafe_allow_html=True)

# ============= HEADER =============
st.markdown(f"""
<div class="main-header">
    <div class="main-title">–ú–¢–° –ë–∞–Ω–∫ ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–æ–≤</div>
    <div class="main-subtitle">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</div>
</div>
""", unsafe_allow_html=True)

# ============= –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î =============
@st.cache_resource
def init_connection():
    try:
        return create_client(
            st.secrets["SUPABASE_URL"],
            st.secrets["SUPABASE_KEY"]
        )
    except:
        return None

@st.cache_data(ttl=60)
def load_data():
    client = init_connection()
    if client:
        try:
            response = client.table("reviews").select("*").execute()
            return pd.DataFrame(response.data)
        except:
            return pd.DataFrame()
    return pd.DataFrame()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

if not df.empty:
    # ============= –ü–ê–ù–ï–õ–¨ –§–ò–õ–¨–¢–†–û–í =============
    with st.container():
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("## üîç –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        period_type = st.radio(
            "–¢–∏–ø –ø–µ—Ä–∏–æ–¥–∞",
            ["–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞—Ç—ã", "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π"],
            horizontal=True,
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
        )
        
        st.markdown("---")
        
        # –§–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
        if period_type == "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π":
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                period_preset = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
                    ["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π", "–í–µ—Å—å –ø–µ—Ä–∏–æ–¥"],
                    index=2
                )
            
            with col2:
                sources_filter = st.multiselect(
                    "–ò—Å—Ç–æ—á–Ω–∏–∫–∏",
                    options=df['source'].unique() if 'source' in df else [],
                    default=df['source'].unique() if 'source' in df else []
                )
            
            with col3:
                rating_filter = st.select_slider(
                    "–î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–æ–≤",
                    options=[1, 2, 3, 4, 5],
                    value=(1, 5)
                )
            
            with col4:
                st.markdown("<br>", unsafe_allow_html=True)
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", type="primary", use_container_width=True):
                    st.cache_data.clear()
                    st.rerun()
        
        elif period_type == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞—Ç—ã":
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if 'review_date' in df:
                    min_date = pd.to_datetime(df['review_date']).min().date()
                    max_date = pd.to_datetime(df['review_date']).max().date()
                else:
                    min_date = datetime.now().date() - timedelta(days=365)
                    max_date = datetime.now().date()
                
                date_from = st.date_input(
                    "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
                    value=max_date - timedelta(days=30),
                    min_value=min_date,
                    max_value=max_date,
                    format="DD.MM.YYYY"
                )
            
            with col2:
                date_to = st.date_input(
                    "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                    value=max_date,
                    min_value=min_date,
                    max_value=max_date,
                    format="DD.MM.YYYY"
                )
            
            with col3:
                sources_filter = st.multiselect(
                    "–ò—Å—Ç–æ—á–Ω–∏–∫–∏",
                    options=df['source'].unique() if 'source' in df else [],
                    default=df['source'].unique() if 'source' in df else []
                )
            
            with col4:
                rating_filter = st.select_slider(
                    "–†–µ–π—Ç–∏–Ω–≥–∏",
                    options=[1, 2, 3, 4, 5],
                    value=(1, 5)
                )
        
        else:  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                relative_value = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", min_value=1, max_value=365, value=30)
            
            with col2:
                relative_unit = st.selectbox("–ï–¥–∏–Ω–∏—Ü–∞", ["–¥–Ω–µ–π", "–Ω–µ–¥–µ–ª—å", "–º–µ—Å—è—Ü–µ–≤"])
            
            with col3:
                sources_filter = st.multiselect(
                    "–ò—Å—Ç–æ—á–Ω–∏–∫–∏",
                    options=df['source'].unique() if 'source' in df else [],
                    default=df['source'].unique() if 'source' in df else []
                )
            
            with col4:
                rating_filter = st.select_slider(
                    "–†–µ–π—Ç–∏–Ω–≥–∏",
                    options=[1, 2, 3, 4, 5],
                    value=(1, 5)
                )
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í =============
    filtered_df = df.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    if 'review_date' in filtered_df:
        filtered_df['review_date'] = pd.to_datetime(filtered_df['review_date'])
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        if period_type == "–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π":
            if period_preset == "–°–µ–≥–æ–¥–Ω—è":
                filtered_df = filtered_df[filtered_df['review_date'].dt.date == datetime.now().date()]
            elif period_preset == "–í—á–µ—Ä–∞":
                filtered_df = filtered_df[filtered_df['review_date'].dt.date == (datetime.now() - timedelta(days=1)).date()]
            elif period_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=7)]
            elif period_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=30)]
            elif period_preset == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=90)]
        
        elif period_type == "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞—Ç—ã":
            filtered_df = filtered_df[
                (filtered_df['review_date'].dt.date >= date_from) & 
                (filtered_df['review_date'].dt.date <= date_to)
            ]
        
        else:  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
            days = relative_value
            if relative_unit == "–Ω–µ–¥–µ–ª—å":
                days = relative_value * 7
            elif relative_unit == "–º–µ—Å—è—Ü–µ–≤":
                days = relative_value * 30
            filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=days)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    if sources_filter and 'source' in filtered_df:
        filtered_df = filtered_df[filtered_df['source'].isin(sources_filter)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if 'rating' in filtered_df:
        filtered_df = filtered_df[(filtered_df['rating'] >= rating_filter[0]) & (filtered_df['rating'] <= rating_filter[1])]
    
    # ============= –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò =============
    st.markdown('<div class="section-card">', unsafe_allow_html=True)
    st.markdown("## üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    total_reviews = len(filtered_df)
    avg_rating = filtered_df['rating'].mean() if 'rating' in filtered_df and not filtered_df.empty else 0
    
    if 'rating' in filtered_df and not filtered_df.empty:
        positive = len(filtered_df[filtered_df['rating'] >= 4])
        negative = len(filtered_df[filtered_df['rating'] <= 2])
        positive_pct = (positive / total_reviews * 100) if total_reviews > 0 else 0
    else:
        positive_pct = 0
    
    if 'bank_response' in filtered_df:
        responses = filtered_df['bank_response'].notna().sum()
        response_rate = (responses / total_reviews * 100) if total_reviews > 0 else 0
    else:
        response_rate = 0
    
    unique_authors = filtered_df['author'].nunique() if 'author' in filtered_df else 0
    
    # NPS —Ä–∞—Å—á–µ—Ç (–ø—Ä–æ–º–æ—É—Ç–µ—Ä—ã - –¥–µ—Ç—Ä–∞–∫—Ç–æ—Ä—ã)
    if 'rating' in filtered_df and not filtered_df.empty:
        promoters = len(filtered_df[filtered_df['rating'] >= 4])
        detractors = len(filtered_df[filtered_df['rating'] <= 2])
        nps = ((promoters - detractors) / total_reviews * 100) if total_reviews > 0 else 0
    else:
        nps = 0
    
    with col1:
        st.metric(
            label="–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤",
            value=f"{total_reviews:,}",
            delta="‚Üë 12%" if total_reviews > 10 else None
        )
    
    with col2:
        st.metric(
            label="–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
            value=f"{avg_rating:.2f}",
            delta="‚Üë 0.2" if avg_rating > 4 else "‚Üì 0.1"
        )
    
    with col3:
        st.metric(
            label="–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ",
            value=f"{positive_pct:.0f}%",
            delta="‚Üë 5%" if positive_pct > 60 else "‚Üì 3%"
        )
    
    with col4:
        st.metric(
            label="–û—Ç–≤–µ—Ç—ã –±–∞–Ω–∫–∞",
            value=f"{response_rate:.0f}%",
            delta="‚Üë 3%" if response_rate > 30 else None
        )
    
    with col5:
        st.metric(
            label="–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            value=f"{unique_authors:,}"
        )
    
    with col6:
        st.metric(
            label="NPS Score",
            value=f"{nps:.0f}",
            delta="‚Üë 8" if nps > 0 else "‚Üì 5"
        )
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= –ì–†–ê–§–ò–ö–ò - –ü–ï–†–í–´–ô –†–Ø–î =============
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        
        if 'review_date' in filtered_df and not filtered_df.empty:
            daily_stats = filtered_df.groupby(filtered_df['review_date'].dt.date).agg({
                'id': 'count',
                'rating': 'mean'
            }).reset_index()
            daily_stats.columns = ['–î–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥']
            
            fig = make_subplots(
                rows=2, cols=1,
                row_heights=[0.7, 0.3],
                shared_xaxes=True,
                vertical_spacing=0.03,
                subplot_titles=('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥')
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            fig.add_trace(
                go.Scatter(
                    x=daily_stats['–î–∞—Ç–∞'],
                    y=daily_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                    mode='lines+markers',
                    name='–û—Ç–∑—ã–≤—ã',
                    line=dict(color=COLORS['primary'], width=2),
                    marker=dict(size=6),
                    fill='tozeroy',
                    fillcolor=f"rgba(30, 64, 175, 0.1)"
                ),
                row=1, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
            fig.add_trace(
                go.Bar(
                    x=daily_stats['–î–∞—Ç–∞'],
                    y=daily_stats['–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'],
                    name='–†–µ–π—Ç–∏–Ω–≥',
                    marker_color=COLORS['info'],
                    opacity=0.8
                ),
                row=2, col=1
            )
            
            fig.update_layout(
                height=400,
                showlegend=False,
                hovermode='x unified',
                plot_bgcolor='white',
                paper_bgcolor='white',
                font=dict(family="Inter", size=11, color=COLORS['text_secondary']),
                margin=dict(l=0, r=0, t=30, b=0)
            )
            
            fig.update_xaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor=COLORS['border'],
                linecolor=COLORS['border']
            )
            fig.update_yaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor=COLORS['border'],
                linecolor=COLORS['border']
            )
            
            st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("### ‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫")
        
        if 'rating' in filtered_df and not filtered_df.empty:
            rating_dist = filtered_df['rating'].value_counts().sort_index()
            
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rating_colors = {
                1: COLORS['danger'],
                2: COLORS['warning'],
                3: COLORS['secondary'],
                4: COLORS['info'],
                5: COLORS['success']
            }
            
            fig = go.Figure(data=[
                go.Bar(
                    x=[f"{i}‚òÖ" for i in range(1, 6)],
                    y=[rating_dist.get(float(i), 0) for i in range(1, 6)],
                    marker_color=[rating_colors[i] for i in range(1, 6)],
                    text=[rating_dist.get(float(i), 0) for i in range(1, 6)],
                    textposition='outside',
                    textfont=dict(size=12, weight=600)
                )
            ])
            
            fig.update_layout(
                height=400,
                showlegend=False,
                plot_bgcolor='white',
                paper_bgcolor='white',
                font=dict(family="Inter", size=11, color=COLORS['text_secondary']),
                margin=dict(l=0, r=0, t=30, b=0),
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                xaxis_title=""
            )
            
            fig.update_xaxes(linecolor=COLORS['border'])
            fig.update_yaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor=COLORS['border'],
                linecolor=COLORS['border']
            )
            
            st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= –ì–†–ê–§–ò–ö–ò - –í–¢–û–†–û–ô –†–Ø–î =============
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("### üì± –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
        
        if 'source' in filtered_df and not filtered_df.empty:
            source_stats = filtered_df['source'].value_counts()
            
            fig = go.Figure(data=[
                go.Pie(
                    labels=source_stats.index,
                    values=source_stats.values,
                    hole=0.4,
                    marker_colors=COLORS['chart_colors'][:len(source_stats)],
                    textinfo='label+percent',
                    textfont=dict(size=11)
                )
            ])
            
            fig.update_layout(
                height=300,
                showlegend=True,
                legend=dict(orientation="v", yanchor="middle", y=0.5, xanchor="left", x=1.05),
                plot_bgcolor='white',
                paper_bgcolor='white',
                font=dict(family="Inter", size=11, color=COLORS['text_secondary']),
                margin=dict(l=0, r=80, t=30, b=0)
            )
            
            st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("### üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        if 'author_location' in filtered_df:
            location_df = filtered_df[filtered_df['author_location'].notna() & (filtered_df['author_location'] != '')]
            if not location_df.empty:
                top_locations = location_df['author_location'].value_counts().head(7)
                
                fig = go.Figure(data=[
                    go.Bar(
                        y=top_locations.index,
                        x=top_locations.values,
                        orientation='h',
                        marker=dict(
                            color=top_locations.values,
                            colorscale=[[0, COLORS['info']], [1, COLORS['primary']]],
                            showscale=False
                        ),
                        text=top_locations.values,
                        textposition='outside'
                    )
                ])
                
                fig.update_layout(
                    height=300,
                    showlegend=False,
                    plot_bgcolor='white',
                    paper_bgcolor='white',
                    font=dict(family="Inter", size=11, color=COLORS['text_secondary']),
                    margin=dict(l=0, r=0, t=30, b=0),
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                )
                
                fig.update_xaxes(linecolor=COLORS['border'])
                fig.update_yaxes(linecolor=COLORS['border'])
                
                st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="section-card">', unsafe_allow_html=True)
        st.markdown("### üí≠ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        if 'rating' in filtered_df and not filtered_df.empty:
            sentiment_data = {
                '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': len(filtered_df[filtered_df['rating'] >= 4]),
                '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ': len(filtered_df[filtered_df['rating'] == 3]),
                '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': len(filtered_df[filtered_df['rating'] <= 2])
            }
            
            fig = go.Figure(data=[
                go.Bar(
                    x=list(sentiment_data.keys()),
                    y=list(sentiment_data.values()),
                    marker_color=[COLORS['success'], COLORS['secondary'], COLORS['danger']],
                    text=list(sentiment_data.values()),
                    textposition='outside'
                )
            ])
            
            fig.update_layout(
                height=300,
                showlegend=False,
                plot_bgcolor='white',
                paper_bgcolor='white',
                font=dict(family="Inter", size=11, color=COLORS['text_secondary']),
                margin=dict(l=0, r=0, t=30, b=0),
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
            )
            
            fig.update_xaxes(linecolor=COLORS['border'])
            fig.update_yaxes(
                showgrid=True,
                gridwidth=1,
                gridcolor=COLORS['border'],
                linecolor=COLORS['border']
            )
            
            st.plotly_chart(fig, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= –¢–ê–ë–õ–ò–¶–ê –û–¢–ó–´–í–û–í =============
    st.markdown('<div class="section-card">', unsafe_allow_html=True)
    st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        show_negative = st.checkbox("–¢–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", value=False)
    with col2:
        show_with_response = st.checkbox("–° –æ—Ç–≤–µ—Ç–æ–º –±–∞–Ω–∫–∞", value=False)
    with col3:
        sort_option = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–î–∞—Ç–∞ ‚Üì", "–†–µ–π—Ç–∏–Ω–≥ ‚Üì", "–†–µ–π—Ç–∏–Ω–≥ ‚Üë"])
    with col4:
        rows_count = st.selectbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫", [10, 25, 50, 100], index=0)
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Ç–∞–±–ª–∏—Ü–µ
    table_df = filtered_df.copy()
    
    if show_negative and 'rating' in table_df:
        table_df = table_df[table_df['rating'] <= 2]
    
    if show_with_response and 'bank_response' in table_df:
        table_df = table_df[table_df['bank_response'].notna()]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_option == "–î–∞—Ç–∞ ‚Üì" and 'review_date' in table_df:
        table_df = table_df.sort_values('review_date', ascending=False)
    elif sort_option == "–†–µ–π—Ç–∏–Ω–≥ ‚Üì" and 'rating' in table_df:
        table_df = table_df.sort_values('rating', ascending=False)
    elif sort_option == "–†–µ–π—Ç–∏–Ω–≥ ‚Üë" and 'rating' in table_df:
        table_df = table_df.sort_values('rating', ascending=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if not table_df.empty:
        display_columns = ['review_date', 'author', 'rating', 'review_text', 'source', 'author_location', 'bank_response']
        display_columns = [col for col in display_columns if col in table_df.columns]
        
        display_df = table_df[display_columns].head(rows_count)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        column_mapping = {
            'review_date': '–î–∞—Ç–∞',
            'author': '–ê–≤—Ç–æ—Ä',
            'rating': '–†–µ–π—Ç–∏–Ω–≥',
            'review_text': '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞',
            'source': '–ò—Å—Ç–æ—á–Ω–∏–∫',
            'author_location': '–ì–æ—Ä–æ–¥',
            'bank_response': '–û—Ç–≤–µ—Ç –±–∞–Ω–∫–∞'
        }
        display_df = display_df.rename(columns=column_mapping)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if '–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞' in display_df:
            display_df['–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞'] = display_df['–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞'].apply(
                lambda x: x[:200] + '...' if isinstance(x, str) and len(x) > 200 else x
            )
        
        if '–û—Ç–≤–µ—Ç –±–∞–Ω–∫–∞' in display_df:
            display_df['–û—Ç–≤–µ—Ç –±–∞–Ω–∫–∞'] = display_df['–û—Ç–≤–µ—Ç –±–∞–Ω–∫–∞'].apply(
                lambda x: '‚úì –ï—Å—Ç—å' if pd.notna(x) and x != '' else '‚Äî'
            )
        
        if '–î–∞—Ç–∞' in display_df:
            display_df['–î–∞—Ç–∞'] = pd.to_datetime(display_df['–î–∞—Ç–∞']).dt.strftime('%d.%m.%Y')
        
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            height=400
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # ============= FOOTER =============
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"**–ú–¢–° –ë–∞–Ω–∫** ¬© {datetime.now().year} ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ v2.0")
    
    with col2:
        st.markdown(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ **{len(filtered_df):,}** –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ **{len(df):,}** –æ–±—â–∏—Ö")
    
    with col3:
        if not filtered_df.empty:
            csv = filtered_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=csv,
                file_name=f'mts_reviews_{datetime.now().strftime("%Y%m%d_%H%M")}.csv',
                mime='text/csv'
            )

else:
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    st.error("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ")
    st.info("""
    ### –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã:
    
    1. **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Streamlit Cloud**
       - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Secrets
       - –î–æ–±–∞–≤—å—Ç–µ SUPABASE_URL –∏ SUPABASE_KEY
    
    2. **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Supabase**
       - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ reviews —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
    
    3. **–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞**
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
    """)
