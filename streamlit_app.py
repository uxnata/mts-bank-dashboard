import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
from supabase import create_client
import numpy as np

# ============= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–¢–†–ê–ù–ò–¶–´ =============
st.set_page_config(
    page_title="–ú–¢–° –ë–∞–Ω–∫ | Analytics Dashboard",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ============= –ö–ê–°–¢–û–ú–ù–´–ï –°–¢–ò–õ–ò CSS =============
st.markdown("""
<style>
    /* –ò–º–ø–æ—Ä—Ç —à—Ä–∏—Ñ—Ç–æ–≤ */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    * {
        font-family: 'Inter', sans-serif;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* –§–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-attachment: fixed;
    }
    
    /* –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
    .main {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        padding: 2rem;
        margin: 1rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
    .dashboard-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 3rem;
        border-radius: 20px;
        margin: -2rem -2rem 2rem -2rem;
        text-align: center;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }
    
    .dashboard-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .dashboard-subtitle {
        font-size: 1.2rem;
        opacity: 0.95;
        font-weight: 400;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="metric-container"] {
        background: white;
        border: 1px solid #e5e7eb;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        transition: all 0.3s ease;
    }
    
    [data-testid="metric-container"]:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    
    [data-testid="metric-container"] > div {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    [data-testid="metric-container"] label {
        font-size: 0.9rem;
        color: #6b7280;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    [data-testid="metric-container"] [data-testid="metric-value"] {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
    }
    
    /* –ì—Ä–∞—Ñ–∏–∫–∏ */
    .plot-container {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
        margin-bottom: 1.5rem;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    .dataframe {
        border: none !important;
        border-radius: 10px;
        overflow: hidden;
    }
    
    .dataframe thead tr th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        font-weight: 600 !important;
        text-transform: uppercase;
        font-size: 0.85rem;
        letter-spacing: 0.5px;
        padding: 1rem !important;
    }
    
    .dataframe tbody tr {
        border-bottom: 1px solid #f3f4f6;
        transition: all 0.2s ease;
    }
    
    .dataframe tbody tr:hover {
        background-color: #f9fafb !important;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 10px;
        font-weight: 600;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
    }
    
    /* –°–µ–ª–µ–∫—Ç—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        transition: all 0.3s ease;
    }
    
    .stSelectbox > div > div:focus-within {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    /* –ê–ª–µ—Ä—Ç—ã */
    .success-box {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    .warning-box {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    .info-box {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        font-weight: 500;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .main > * {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ */
    hr {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, transparent, #e5e7eb, transparent);
        margin: 2rem 0;
    }
    
    /* –°–∞–π–¥–±–∞—Ä */
    .css-1d391kg {
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(10px);
    }
    
    /* –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        margin: 0.25rem;
    }
    
    .status-positive {
        background: #10b981;
        color: white;
    }
    
    .status-negative {
        background: #ef4444;
        color: white;
    }
    
    .status-neutral {
        background: #6b7280;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# ============= HEADER =============
st.markdown("""
<div class="dashboard-header">
    <div class="dashboard-title">üè¶ –ú–¢–° –ë–∞–Ω–∫ Analytics</div>
    <div class="dashboard-subtitle">Real-time Customer Experience Dashboard</div>
</div>
""", unsafe_allow_html=True)

# ============= –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î =============
@st.cache_resource
def init_connection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    try:
        return create_client(
            st.secrets["SUPABASE_URL"],
            st.secrets["SUPABASE_KEY"]
        )
    except:
        return None

# ============= –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• =============
@st.cache_data(ttl=60)
def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ –ë–î"""
    client = init_connection()
    if client:
        try:
            response = client.table("reviews").select("*").execute()
            return pd.DataFrame(response.data)
        except:
            return pd.DataFrame()
    return pd.DataFrame()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = load_data()

if not df.empty:
    # ============= –§–ò–õ–¨–¢–†–´ =============
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å —Ñ–æ–Ω–æ–º
    with st.container():
        st.markdown("""
        <div style='background: linear-gradient(135deg, rgba(102,126,234,0.1) 0%, rgba(118,75,162,0.1) 100%); 
                    padding: 1.5rem; border-radius: 15px; margin-bottom: 2rem;'>
            <h3 style='margin-top: 0; color: #1f2937;'>üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        col1, col2, col3 = st.columns([3, 2, 2])
        
        with col1:
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–µ—Ä–∏–æ–¥–∞
            period_type = st.radio(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞",
                ["–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã", "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥"],
                horizontal=True
            )
        
        with col2:
            sources_filter = st.multiselect(
                "üì± –ò—Å—Ç–æ—á–Ω–∏–∫–∏",
                options=df['source'].unique() if 'source' in df else [],
                default=df['source'].unique() if 'source' in df else []
            )
        
        with col3:
            rating_filter = st.select_slider(
                "‚≠ê –†–µ–π—Ç–∏–Ω–≥",
                options=[1, 2, 3, 4, 5],
                value=(1, 5)
            )
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        st.markdown("---")
        
        if period_type == "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä":
            col1, col2, col3, col4 = st.columns(4)
            
            quick_period = None
            with col1:
                if st.button("üìÖ –°–µ–≥–æ–¥–Ω—è", use_container_width=True):
                    quick_period = "today"
            with col2:
                if st.button("üìÖ –í—á–µ—Ä–∞", use_container_width=True):
                    quick_period = "yesterday"
            with col3:
                if st.button("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è", use_container_width=True):
                    quick_period = "this_week"
            with col4:
                if st.button("üìÖ –≠—Ç–æ—Ç –º–µ—Å—è—Ü", use_container_width=True):
                    quick_period = "this_month"
            
            col5, col6, col7, col8 = st.columns(4)
            with col5:
                if st.button("üìÖ 7 –¥–Ω–µ–π", use_container_width=True):
                    quick_period = "7_days"
            with col6:
                if st.button("üìÖ 30 –¥–Ω–µ–π", use_container_width=True):
                    quick_period = "30_days"
            with col7:
                if st.button("üìÖ 90 –¥–Ω–µ–π", use_container_width=True):
                    quick_period = "90_days"
            with col8:
                if st.button("üìÖ –í—Å–µ –≤—Ä–µ–º—è", use_container_width=True):
                    quick_period = "all_time"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ session state
            if quick_period:
                st.session_state['quick_period'] = quick_period
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            selected_period = st.session_state.get('quick_period', '7_days')
            
        elif period_type == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã":
            col1, col2 = st.columns(2)
            
            with col1:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö
                if 'review_date' in df:
                    min_date = pd.to_datetime(df['review_date']).min().date()
                    max_date = pd.to_datetime(df['review_date']).max().date()
                else:
                    min_date = datetime.now().date() - timedelta(days=365)
                    max_date = datetime.now().date()
                
                date_from = st.date_input(
                    "üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
                    value=max_date - timedelta(days=30),
                    min_value=min_date,
                    max_value=max_date,
                    format="DD.MM.YYYY"
                )
            
            with col2:
                date_to = st.date_input(
                    "üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
                    value=max_date,
                    min_value=min_date,
                    max_value=max_date,
                    format="DD.MM.YYYY"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            if date_from and date_to:
                days_selected = (date_to - date_from).days + 1
                st.info(f"üìä –í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: **{days_selected}** –¥–Ω–µ–π ({date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')})")
        
        elif period_type == "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            col1, col2, col3 = st.columns([2, 2, 1])
            
            with col1:
                relative_number = st.number_input(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                    min_value=1,
                    max_value=365,
                    value=7,
                    step=1
                )
            
            with col2:
                relative_unit = st.selectbox(
                    "–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏",
                    ["–¥–Ω–µ–π", "–Ω–µ–¥–µ–ª—å", "–º–µ—Å—è—Ü–µ–≤"],
                    index=0
                )
            
            with col3:
                relative_direction = st.selectbox(
                    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    ["–Ω–∞–∑–∞–¥", "–≤–ø–µ—Ä–µ–¥"],
                    index=0
                )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–Ω–∏
            if relative_unit == "–Ω–µ–¥–µ–ª—å":
                days_to_filter = relative_number * 7
            elif relative_unit == "–º–µ—Å—è—Ü–µ–≤":
                days_to_filter = relative_number * 30
            else:
                days_to_filter = relative_number
            
            st.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ **{relative_number} {relative_unit}**")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        st.markdown("---")
        col1, col2, col3 = st.columns([2, 2, 1])
        with col3:
            if st.button("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", use_container_width=True, type="primary"):
                st.cache_data.clear()
                st.rerun()
    
    # ============= –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í =============
    filtered_df = df.copy()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    if 'review_date' in filtered_df:
        filtered_df['review_date'] = pd.to_datetime(filtered_df['review_date'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        if period_type == "–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä":
            selected_period = st.session_state.get('quick_period', '7_days')
            
            if selected_period == "today":
                filtered_df = filtered_df[filtered_df['review_date'].dt.date == datetime.now().date()]
            elif selected_period == "yesterday":
                filtered_df = filtered_df[filtered_df['review_date'].dt.date == (datetime.now() - timedelta(days=1)).date()]
            elif selected_period == "this_week":
                week_start = datetime.now() - timedelta(days=datetime.now().weekday())
                filtered_df = filtered_df[filtered_df['review_date'] >= week_start]
            elif selected_period == "this_month":
                month_start = datetime.now().replace(day=1)
                filtered_df = filtered_df[filtered_df['review_date'] >= month_start]
            elif selected_period == "7_days":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=7)]
            elif selected_period == "30_days":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=30)]
            elif selected_period == "90_days":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=90)]
            # all_time - –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
            
        elif period_type == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã":
            if date_from and date_to:
                filtered_df = filtered_df[
                    (filtered_df['review_date'].dt.date >= date_from) & 
                    (filtered_df['review_date'].dt.date <= date_to)
                ]
        
        elif period_type == "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
            if relative_direction == "–Ω–∞–∑–∞–¥":
                filtered_df = filtered_df[filtered_df['review_date'] >= datetime.now() - timedelta(days=days_to_filter)]
            else:
                filtered_df = filtered_df[filtered_df['review_date'] <= datetime.now() + timedelta(days=days_to_filter)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    if sources_filter and 'source' in filtered_df:
        filtered_df = filtered_df[filtered_df['source'].isin(sources_filter)]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if 'rating' in filtered_df:
        filtered_df = filtered_df[(filtered_df['rating'] >= rating_filter[0]) & (filtered_df['rating'] <= rating_filter[1])]
    
    # ============= –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ë–†–ê–ù–ù–û–ú –ü–ï–†–ò–û–î–ï =============
    if not filtered_df.empty and 'review_date' in filtered_df:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É
        period_start = filtered_df['review_date'].min()
        period_end = filtered_df['review_date'].max()
        total_days = (period_end - period_start).days + 1
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
                    color: white; padding: 1rem; border-radius: 10px; margin-bottom: 2rem;'>
            <strong>üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö:</strong> {len(filtered_df)} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {period_start.strftime('%d.%m.%Y')} –ø–æ {period_end.strftime('%d.%m.%Y')} ({total_days} –¥–Ω–µ–π)
        </div>
        """, unsafe_allow_html=True)
    
    # ============= –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò =============
    st.markdown("### üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    
    with col1:
        total_reviews = len(filtered_df)
        st.metric(
            label="üìù –û—Ç–∑—ã–≤–æ–≤",
            value=total_reviews,
            delta="‚Üë 12%" if total_reviews > 0 else None
        )
    
    with col2:
        avg_rating = filtered_df['rating'].mean() if 'rating' in filtered_df else 0
        st.metric(
            label="‚≠ê –†–µ–π—Ç–∏–Ω–≥",
            value=f"{avg_rating:.2f}",
            delta="‚Üë 0.3" if avg_rating > 4 else "‚Üì 0.2"
        )
    
    with col3:
        positive = len(filtered_df[filtered_df['rating'] >= 4]) if 'rating' in filtered_df else 0
        positive_pct = (positive / len(filtered_df) * 100) if len(filtered_df) > 0 else 0
        st.metric(
            label="üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö",
            value=f"{positive_pct:.0f}%",
            delta="‚Üë 5%" if positive_pct > 60 else None
        )
    
    with col4:
        if 'bank_response' in filtered_df:
            responses = filtered_df['bank_response'].notna().sum()
            response_rate = (responses / len(filtered_df) * 100) if len(filtered_df) > 0 else 0
        else:
            response_rate = 0
        st.metric(
            label="üí¨ –û—Ç–≤–µ—Ç—ã",
            value=f"{response_rate:.0f}%",
            delta="‚Üë 8%" if response_rate > 30 else "‚Üì 3%"
        )
    
    with col5:
        unique_authors = filtered_df['author'].nunique() if 'author' in filtered_df else 0
        st.metric(
            label="üë• –ê–≤—Ç–æ—Ä–æ–≤",
            value=unique_authors,
            delta=None
        )
    
    with col6:
        nps_score = 72  # –ú–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        st.metric(
            label="üìà NPS",
            value=nps_score,
            delta="‚Üë 15"
        )
    
    st.markdown("---")
    
    # ============= –ì–†–ê–§–ò–ö–ò =============
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns([3, 2])
    
    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
        
        if 'review_date' in filtered_df:
            daily_stats = filtered_df.groupby(filtered_df['review_date'].dt.date).agg({
                'id': 'count',
                'rating': 'mean'
            }).reset_index()
            daily_stats.columns = ['–î–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥']
            
            fig = make_subplots(
                rows=2, cols=1,
                row_heights=[0.7, 0.3],
                shared_xaxes=True,
                vertical_spacing=0.05
            )
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            fig.add_trace(
                go.Scatter(
                    x=daily_stats['–î–∞—Ç–∞'],
                    y=daily_stats['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                    mode='lines+markers',
                    name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤',
                    line=dict(color='#667eea', width=3),
                    marker=dict(size=8, color='#667eea'),
                    fill='tozeroy',
                    fillcolor='rgba(102, 126, 234, 0.1)'
                ),
                row=1, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
            fig.add_trace(
                go.Bar(
                    x=daily_stats['–î–∞—Ç–∞'],
                    y=daily_stats['–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'],
                    name='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
                    marker_color='#764ba2',
                    opacity=0.7
                ),
                row=2, col=1
            )
            
            fig.update_layout(
                height=400,
                showlegend=True,
                hovermode='x unified',
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter", size=12),
                margin=dict(l=0, r=0, t=0, b=0)
            )
            
            fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='#f3f4f6')
            fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#f3f4f6')
            
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        st.markdown("### ‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫")
        
        if 'rating' in filtered_df:
            rating_dist = filtered_df['rating'].value_counts().sort_index()
            
            colors = ['#ef4444', '#f97316', '#eab308', '#84cc16', '#22c55e']
            
            fig = go.Figure(data=[
                go.Bar(
                    x=['1‚≠ê', '2‚≠ê', '3‚≠ê', '4‚≠ê', '5‚≠ê'],
                    y=[rating_dist.get(i, 0) for i in range(1, 6)],
                    marker_color=colors,
                    text=[rating_dist.get(i, 0) for i in range(1, 6)],
                    textposition='outside',
                    textfont=dict(size=14, weight=600)
                )
            ])
            
            fig.update_layout(
                height=400,
                showlegend=False,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter", size=12),
                margin=dict(l=0, r=0, t=0, b=0),
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                xaxis_title=""
            )
            
            fig.update_xaxes(showgrid=False)
            fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='#f3f4f6')
            
            st.plotly_chart(fig, use_container_width=True)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col3, col4, col5 = st.columns([2, 2, 2])
    
    with col3:
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        st.markdown("### üì± –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
        
        if 'source' in filtered_df:
            source_stats = filtered_df['source'].value_counts()
            
            fig = go.Figure(data=[
                go.Pie(
                    labels=source_stats.index,
                    values=source_stats.values,
                    hole=0.6,
                    marker_colors=['#667eea', '#764ba2', '#a855f7', '#ec4899'],
                    textinfo='label+percent',
                    textfont=dict(size=12)
                )
            ])
            
            fig.update_layout(
                height=300,
                showlegend=True,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(family="Inter", size=12),
                margin=dict(l=0, r=0, t=30, b=0)
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    with col4:
        # –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤
        st.markdown("### üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è")
        
        if 'author_location' in filtered_df:
            location_df = filtered_df[filtered_df['author_location'].notna() & (filtered_df['author_location'] != '')]
            if not location_df.empty:
                top_locations = location_df['author_location'].value_counts().head(5)
                
                fig = go.Figure(data=[
                    go.Bar(
                        y=top_locations.index,
                        x=top_locations.values,
                        orientation='h',
                        marker=dict(
                            color=top_locations.values,
                            colorscale='Viridis',
                            showscale=False
                        ),
                        text=top_locations.values,
                        textposition='outside'
                    )
                ])
                
                fig.update_layout(
                    height=300,
                    showlegend=False,
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    font=dict(family="Inter", size=12),
                    margin=dict(l=0, r=0, t=30, b=0),
                    xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"
                )
                
                st.plotly_chart(fig, use_container_width=True)
    
    with col5:
        # –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        st.markdown("### üí≠ –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        sentiment_data = {
            '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ': len(filtered_df[filtered_df['rating'] >= 4]) if 'rating' in filtered_df else 0,
            '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ': len(filtered_df[filtered_df['rating'] == 3]) if 'rating' in filtered_df else 0,
            '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ': len(filtered_df[filtered_df['rating'] <= 2]) if 'rating' in filtered_df else 0
        }
        
        fig = go.Figure(data=[
            go.Bar(
                x=list(sentiment_data.keys()),
                y=list(sentiment_data.values()),
                marker_color=['#22c55e', '#eab308', '#ef4444'],
                text=list(sentiment_data.values()),
                textposition='outside'
            )
        ])
        
        fig.update_layout(
            height=300,
            showlegend=False,
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(family="Inter", size=12),
            margin=dict(l=0, r=0, t=30, b=0),
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    st.markdown("---")
    
    # ============= –¢–ê–ë–õ–ò–¶–ê –û–¢–ó–´–í–û–í =============
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã")
    
    # –ö–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    col1, col2, col3, col4 = st.columns([2, 2, 2, 2])
    
    with col1:
        show_negative = st.checkbox("üî¥ –¢–æ–ª—å–∫–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ", value=False)
    with col2:
        show_with_response = st.checkbox("üí¨ –° –æ—Ç–≤–µ—Ç–æ–º –±–∞–Ω–∫–∞", value=False)
    with col3:
        sort_by = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞", ["–î–∞—Ç–∞ ‚Üì", "–†–µ–π—Ç–∏–Ω–≥ ‚Üì", "–†–µ–π—Ç–∏–Ω–≥ ‚Üë"])
    with col4:
        rows_to_show = st.number_input("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫", min_value=5, max_value=50, value=10)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    table_df = filtered_df.copy()
    
    if show_negative and 'rating' in table_df:
        table_df = table_df[table_df['rating'] <= 2]
    
    if show_with_response and 'bank_response' in table_df:
        table_df = table_df[table_df['bank_response'].notna()]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–î–∞—Ç–∞ ‚Üì" and 'review_date' in table_df:
        table_df = table_df.sort_values('review_date', ascending=False)
    elif sort_by == "–†–µ–π—Ç–∏–Ω–≥ ‚Üì" and 'rating' in table_df:
        table_df = table_df.sort_values('rating', ascending=False)
    elif sort_by == "–†–µ–π—Ç–∏–Ω–≥ ‚Üë" and 'rating' in table_df:
        table_df = table_df.sort_values('rating', ascending=True)
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_columns = ['review_date', 'author', 'rating', 'review_text', 'source', 'author_location']
    display_columns = [col for col in display_columns if col in table_df.columns]
    
    if display_columns:
        display_df = table_df[display_columns].head(rows_to_show)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        column_mapping = {
            'review_date': '–î–∞—Ç–∞',
            'author': '–ê–≤—Ç–æ—Ä',
            'rating': '–†–µ–π—Ç–∏–Ω–≥',
            'review_text': '–û—Ç–∑—ã–≤',
            'source': '–ò—Å—Ç–æ—á–Ω–∏–∫',
            'author_location': '–ì–æ—Ä–æ–¥'
        }
        display_df = display_df.rename(columns=column_mapping)
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–æ–≤
        if '–û—Ç–∑—ã–≤' in display_df:
            display_df['–û—Ç–∑—ã–≤'] = display_df['–û—Ç–∑—ã–≤'].apply(
                lambda x: x[:150] + '...' if isinstance(x, str) and len(x) > 150 else x
            )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if '–î–∞—Ç–∞' in display_df:
            display_df['–î–∞—Ç–∞'] = pd.to_datetime(display_df['–î–∞—Ç–∞']).dt.strftime('%d.%m.%Y')
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "–†–µ–π—Ç–∏–Ω–≥": st.column_config.NumberColumn(
                    "–†–µ–π—Ç–∏–Ω–≥",
                    format="%d ‚≠ê",
                    min_value=1,
                    max_value=5,
                ),
                "–î–∞—Ç–∞": st.column_config.DateColumn(
                    "–î–∞—Ç–∞",
                    format="DD.MM.YYYY",
                ),
            }
        )
    
    # ============= FOOTER =============
    st.markdown("---")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("üè¶ **–ú–¢–° –ë–∞–Ω–∫** Analytics Dashboard")
    
    with col2:
        st.markdown(f"üìä –î–∞–Ω–Ω—ã–µ: **{len(filtered_df)}** –æ—Ç–∑—ã–≤–æ–≤")
    
    with col3:
        st.markdown(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: **{datetime.now().strftime('%H:%M:%S')}**")
    
    with col4:
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        if not filtered_df.empty:
            csv = filtered_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f'mts_reviews_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv',
                mime='text/csv',
            )

else:
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    st.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    st.info("""
    ### –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
    1. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —Å–µ–∫—Ä–µ—Ç—ã SUPABASE_
