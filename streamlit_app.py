
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta

st.set_page_config(page_title="–ú–¢–° –ë–∞–Ω–∫ Dashboard", page_icon="üè¶", layout="wide")

st.title("üè¶ –ú–¢–° –ë–∞–Ω–∫ - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤")
st.markdown("---")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
try:
    from supabase import create_client
    
    # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ secrets
    url = st.secrets["SUPABASE_URL"]
    key = st.secrets["SUPABASE_KEY"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    supabase = create_client(url, key)
    
    # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    from_date = (datetime.now() - timedelta(days=7)).isoformat()
    response = supabase.table("reviews").select("*").limit(100).execute()
    
    if response.data:
        df = pd.DataFrame(response.data)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìù –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(df))
        
        with col2:
            if "rating" in df.columns:
                avg_rating = df["rating"].mean()
                st.metric("‚≠ê –†–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.1f}")
            else:
                st.metric("‚≠ê –†–µ–π—Ç–∏–Ω–≥", "N/A")
        
        with col3:
            if "source" in df.columns:
                sources = df["source"].nunique()
                st.metric("üì± –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤", sources)
            else:
                st.metric("üì± –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤", "N/A")
        
        with col4:
            if "author" in df.columns:
                authors = df["author"].nunique()
                st.metric("üë• –ê–≤—Ç–æ—Ä–æ–≤", authors)
            else:
                st.metric("üë• –ê–≤—Ç–æ—Ä–æ–≤", "N/A")
        
        # –ì—Ä–∞—Ñ–∏–∫
        st.markdown("---")
        st.subheader("üìä –î–∞–Ω–Ω—ã–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        display_cols = ["review_date", "author", "rating", "source"]
        display_cols = [col for col in display_cols if col in df.columns]
        
        if display_cols:
            st.dataframe(df[display_cols].head(10), use_container_width=True)
        else:
            st.dataframe(df.head(10), use_container_width=True)
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("---")
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if "source" in df.columns:
                st.write("**–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:**")
                source_stats = df["source"].value_counts()
                st.write(source_stats)
        
        with col2:
            if "rating" in df.columns:
                st.write("**–ü–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º:**")
                rating_stats = df["rating"].value_counts().sort_index()
                st.write(rating_stats)
    else:
        st.warning("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ")
        
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    st.code(str(e))
    st.info("""
    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
    1. –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ Settings ‚Üí Secrets
    2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –∫–ª—é—á–∏ SUPABASE_URL –∏ SUPABASE_KEY
    3. –ï—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ reviews –≤ Supabase
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
